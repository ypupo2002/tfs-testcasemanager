// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace TestCaseManagerCore.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using TestCaseManagerCore.BusinessLogic.Entities;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Projects\TestCaseManager\TestCaseManagerCore\Templates\HtmlTestCaseExportTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class HtmlTestCaseExportTemplate : HtmlTestCaseExportTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"Content-Type\" content=\"text/h" +
                    "tml; charset=windows-1251\" />\r\n\t<style type=\"text/css\">\r\n        html, body, but" +
                    "ton, ul, li, span, table, thead, tbody, tr, th, td, hr {\r\n            margin: 0;" +
                    "\r\n            padding: 0;\r\n        }\r\n\r\n        .testCaseProps {\r\n            di" +
                    "splay: block;\r\n        }\r\n\r\n            .testCaseProps > span {\r\n               " +
                    " font-size: 1.2em;\r\n                font-weight: bold;\r\n            }\r\n\r\n       " +
                    " .noTestStepsTable th {\r\n            text-align: left;\r\n        }\r\n\r\n        hr " +
                    "{\r\n            height: 3px;\r\n            color: #339933;\r\n            background" +
                    "-color: #339933;\r\n            border-width: 0;\r\n            margin-bottom: 30px;" +
                    "\r\n            margin-top: 30px;\r\n        }\r\n\r\n        body {\r\n            backgr" +
                    "ound-color: #fff;\r\n            color: #000;\r\n        }\r\n\r\n        th, td {\r\n    " +
                    "        border: 1px solid #000;\r\n            padding: 1%;\r\n        }\r\n\r\n        " +
                    "table {\r\n            margin-top: 10px;\r\n            border-collapse: collapse;\r\n" +
                    "            width: 100%;\r\n        }\r\n\r\n        th:first-child, td:first-child {\r" +
                    "\n            width: 5%;\r\n        }\r\n\r\n        th:nth-child(2), td:nth-child(2) {" +
                    "\r\n            width: 40%;\r\n        }\r\n\r\n        th:nth-child(3), td:nth-child(3)" +
                    " {\r\n            width: 40%;\r\n        }\r\n\r\n        .expanded {\r\n            displ" +
                    "ay: block;\r\n        }\r\n\r\n        .collapsed {\r\n            display: none;\r\n     " +
                    "   }\r\n\r\n        ul {\r\n            margin-top: 20px;\r\n            margin-left: 20" +
                    "px;\r\n            list-style-type: none;\r\n        }\r\n\r\n        button {\r\n        " +
                    "    padding: 1px 5px;\r\n            margin-top: 5px;\r\n            background-colo" +
                    "r: #fff;\r\n            border: 2px solid #339933;\r\n            color: #339933;\r\n " +
                    "           font-weight: 900;\r\n        }\r\n\t\t\r\n\t\t button:hover {\r\n                " +
                    "background-color: #339933;\r\n                color: #fff;\r\n            }\r\n\r\n     " +
                    "   #expandAll, #collapseAll {\r\n            position: absolute;\r\n            top:" +
                    " 20px;\r\n            position: fixed;\r\n        }\r\n\r\n        #expandAll {\r\n       " +
                    "     right: 180px;\r\n        }\r\n\r\n        #collapseAll {\r\n            right: 20px" +
                    ";\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<button id=\"expandAll\">Expand All</" +
                    "button>\r\n<button id=\"collapseAll\">Collapse All</button>\r\n<ul>\r\n");
            
            #line 117 "D:\Projects\TestCaseManager\TestCaseManagerCore\Templates\HtmlTestCaseExportTemplate.tt"

	BuildBody();

            
            #line default
            #line hidden
            this.Write("</ul>\r\n\r\n<script>\r\n(function () {\r\n    var liItems = document.getElementsByTagNam" +
                    "e(\"li\");\r\n    var expandAllButton = document.getElementById(\"expandAll\");\r\n    v" +
                    "ar collapseAllButton = document.getElementById(\"collapseAll\");\r\n\r\n    // initial" +
                    "ize li items, by giving a class name and inserting a button(each button gets eve" +
                    "nt for click) for each li item\r\n    for (var i = 0; i < liItems.length; i++) {\r\n" +
                    "        var currTable = liItems[i].getElementsByTagName(\"TABLE\")[0];\r\n        cu" +
                    "rrTable.className = \"collapsed\";\r\n        liItems[i].innerHTML = liItems[i].inne" +
                    "rHTML + \"<button name=\'collapsed\'> + </button> <span>Show steps</span> <hr />\";\r" +
                    "\n        var currentLiButton = liItems[i].getElementsByTagName(\"BUTTON\")[0];\r\n  " +
                    "      currentLiButton.addEventListener(\"click\", expandCollapseTestCase, false);\r" +
                    "\n    }\r\n\r\n    function expandCollapseTestCase(event) {\r\n        if (this.name ==" +
                    "= \"collapsed\") {\r\n            var currentTable = event.target.parentElement.getE" +
                    "lementsByTagName(\"TABLE\")[0];\r\n            currentTable.className = \"expanded\";\r" +
                    "\n            this.name = \"expanded\";\r\n            this.innerHTML = \" - \";\r\n     " +
                    "       this.nextElementSibling.innerHTML = \"Hide steps\";\r\n        } else {\r\n    " +
                    "        var currentTable = event.target.parentElement.getElementsByTagName(\"TABL" +
                    "E\")[0];\r\n            currentTable.className = \"collapsed\";\r\n            this.nam" +
                    "e = \"collapsed\";\r\n            this.innerHTML = \" + \";\r\n            this.nextElem" +
                    "entSibling.innerHTML = \"Show steps\";\r\n        }\r\n    }\r\n\r\n    function expandAll" +
                    "() {\r\n        for (var i = 0; i < liItems.length; i++) {\r\n            var curren" +
                    "tTable = liItems[i].getElementsByTagName(\"TABLE\")[0];\r\n            currentTable." +
                    "className = \"expanded\";\r\n            var expandButton = liItems[i].getElementsBy" +
                    "TagName(\"Button\")[0];\r\n            expandButton.innerHTML = \" - \";\r\n            " +
                    "expandButton.name = \"expanded\";\r\n            var showHideLabel = expandButton.ne" +
                    "xtElementSibling;\r\n            showHideLabel.innerHTML = \"Hide steps\"\r\n        }" +
                    "\r\n    }\r\n\r\n    function collapseAll() {\r\n        for (var i = 0; i < liItems.len" +
                    "gth; i++) {\r\n            var currentTable = liItems[i].getElementsByTagName(\"TAB" +
                    "LE\")[0];\r\n            currentTable.className = \"collapsed\";\r\n            var col" +
                    "lapsedButton = liItems[i].getElementsByTagName(\"Button\")[0];\r\n            collap" +
                    "sedButton.innerHTML = \" + \";\r\n            collapsedButton.name = \"collapsed\";\r\n " +
                    "           var showHideLabel = collapsedButton.nextElementSibling;\r\n            " +
                    "showHideLabel.innerHTML = \"Show steps\"\r\n        }\r\n    }\r\n\r\n    expandAllButton." +
                    "addEventListener(\"click\", expandAll, false);\r\n    collapseAllButton.addEventList" +
                    "ener(\"click\", collapseAll, false);\r\n\r\n})();\r\n\r\n\r\n\r\n    </script>\r\n</body>\r\n</htm" +
                    "l>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 187 "D:\Projects\TestCaseManager\TestCaseManagerCore\Templates\HtmlTestCaseExportTemplate.tt"

public void BuildBody()
{
	foreach (TestCaseFull currentFullTestCase in FullTestCases)
	{
		PushIndent("\t");
		BuildTestCaseProperties(currentFullTestCase.TestCase, currentFullTestCase.MostRecentResult);
		BuildTestCaseTestStepsTable(currentFullTestCase.TestSteps);
		PopIndent();
	} 
}

public void BuildTestCaseProperties(TestCase testCase, string status)
{	
	WriteLine(@"<li>");
	WriteLine(@"<span class=""testCaseProps""><span>Title: </span>");
	WriteLine(testCase.ITestCase.Title);
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Suite: </span>");
	if(testCase.ITestSuiteBase != null)
    {
		WriteLine(testCase.ITestSuiteBase.Title);
    }
	
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Area: </span>");
	WriteLine(testCase.Area);
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Priority: </span>");
	WriteLine(testCase.Priority.ToString());
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Automated: </span>");
	if(testCase.ITestCase != null)
    {
		WriteLine(testCase.ITestCase.IsAutomated.ToString());
    }	
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Assigned To: </span>");
	WriteLine(testCase.OwnerDisplayName);
	WriteLine(@"</span>");	
    WriteLine(@"<span class=""testCaseProps""><span>Status: </span>");
	WriteLine(status);
	WriteLine(@"</span>");	
}

public void BuildTestCaseTestStepsTable(List<TestStep> testSteps)
{	
	if(testSteps.Count > 0)
    {
		WriteLine(@"<table cellpadding=""0"" cellspacing=""0"">");
		PushIndent("\t");
		WriteLine(@"<thead>");
		PushIndent("\t");
		int count = 1;
		WriteLine(@"<tr>");
		PushIndent("\t");
		WriteLine(@"<th>Number</th>");
		WriteLine(@"<th>Actions</th>");
		WriteLine(@"<th>Expected Results</th>");
		PopIndent();
		WriteLine(@"</tr>");
		WriteLine(@"</thead>");
		WriteLine(@"<tbody>");
		PushIndent("\t");

		foreach (TestStep currentTestStep in testSteps)
		{		
			WriteLine(@"<tr>");
			WriteLine(string.Format("<td>{0}</td>", count++));
			string currentTestStepActionTitle = currentTestStep.ActionTitle.Replace("\r\n","<br>"); 
			string currentTestStepActionExpectedResult = currentTestStep.ActionExpectedResult.Replace("\r\n","<br>");
			WriteLine(string.Format("<td>{0}</td>", currentTestStepActionTitle));
			WriteLine(string.Format("<td>{0}</td>", currentTestStepActionExpectedResult));
			WriteLine(@"</tr>");
		}	
    }
	else
    {
		WriteLine(@"<table cellpadding=""0"" cellspacing=""0"">");
		PushIndent("\t");
		WriteLine(@"<tbody>");
		PushIndent("\t");
		WriteLine(@"<tr>");
		PushIndent("\t");
		WriteLine("<td>No Test Steps Available</td>");
		PushIndent("\t");
		WriteLine(@"</tr>");
    }   
	PopIndent();
	WriteLine(@"</tbody>");
	PopIndent();
	WriteLine(@"</table>");
	WriteLine(@"</li>");
}

        
        #line default
        #line hidden
        
        #line 1 "D:\Projects\TestCaseManager\TestCaseManagerCore\Templates\HtmlTestCaseExportTemplate.tt"

private global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull> _FullTestCasesField;

/// <summary>
/// Access the FullTestCases parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull> FullTestCases
{
    get
    {
        return this._FullTestCasesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool FullTestCasesValueAcquired = false;
if (this.Session.ContainsKey("FullTestCases"))
{
    if ((typeof(global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>).IsAssignableFrom(this.Session["FullTestCases"].GetType()) == false))
    {
        this.Error("The type \'System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entit" +
                "ies.TestCaseFull>\' of the parameter \'FullTestCases\' did not match the type of th" +
                "e data passed to the template.");
    }
    else
    {
        this._FullTestCasesField = ((global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>)(this.Session["FullTestCases"]));
        FullTestCasesValueAcquired = true;
    }
}
if ((FullTestCasesValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "FullTestCases");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._FullTestCasesField = ((global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>)(tc.ConvertFrom(parameterValue)));
            FullTestCasesValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entit" +
                    "ies.TestCaseFull>\' of the parameter \'FullTestCases\' did not match the type of th" +
                    "e data passed to the template.");
        }
    }
}
if ((FullTestCasesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FullTestCases");
    if ((data != null))
    {
        if ((typeof(global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entit" +
                    "ies.TestCaseFull>\' of the parameter \'FullTestCases\' did not match the type of th" +
                    "e data passed to the template.");
        }
        else
        {
            this._FullTestCasesField = ((global::System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class HtmlTestCaseExportTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
