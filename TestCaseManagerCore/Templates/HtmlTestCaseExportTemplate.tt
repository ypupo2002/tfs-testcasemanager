<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestCaseManagerCore.BusinessLogic.Entities" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="FullTestCases" type="System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>" #>
<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
	<style type="text/css">
		.testCaseProps{display:block;}
		.testCaseProps > span {font-size: 1.2em; font-weight:bold;}
		.noTestStepsTable th {text-align:left}
		hr{height:3px; color: #339933; background-color: #339933; border-width:0; margin-bottom:30px; margin-top:30px; }
		body{background-color: #fff; color: #000;}
		th, td{border:1px solid #000; padding:1%;}
		table{margin-top:10px; border-collapse:collapse; width:100%;}
		th:first-child, td:first-child{width:5%;}
		th:nth-child(2), td:nth-child(2){width:40%;}
		th:nth-child(3), td:nth-child(3){width:40%;}
	</style>
</head>
<body>

<#
	BuildBody();
#>

<#+
public void BuildBody()
{
	foreach (TestCaseFull currentFullTestCase in FullTestCases)
	{
		PushIndent("\t");
		BuildTestCaseProperties(currentFullTestCase.TestCase);
		BuildTestCaseTestStepsTable(currentFullTestCase.TestSteps);
		PopIndent();
	} 
}

public void BuildTestCaseProperties(TestCase testCase)
{	
	WriteLine(@"<span class=""testCaseProps""><span>Title: </span>");
	WriteLine(testCase.ITestCase.Title);
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Suite: </span>");
	if(testCase.ITestSuiteBase != null)
    {
		WriteLine(testCase.ITestSuiteBase.Title);
    }
	
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Area: </span>");
	WriteLine(testCase.Area);
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Priority: </span>");
	WriteLine(testCase.Priority.ToString());
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Automated: </span>");
	if(testCase.ITestCase != null)
    {
		WriteLine(testCase.ITestCase.IsAutomated.ToString());
    }	
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Assigned To: </span>");
	WriteLine(testCase.OwnerDisplayName);
	WriteLine(@"</span>");	
}

public void BuildTestCaseTestStepsTable(List<TestStep> testSteps)
{	
	if(testSteps.Count > 0)
    {
		WriteLine(@"<table cellpadding=""0"" cellspacing=""0"">");
		PushIndent("\t");
		WriteLine(@"<thead>");
		PushIndent("\t");
		int count = 1;
		WriteLine(@"<tr>");
		PushIndent("\t");
		WriteLine(@"<th>Number</th>");
		WriteLine(@"<th>Actions</th>");
		WriteLine(@"<th>Expected Results</th>");
		PopIndent();
		WriteLine(@"</tr>");
		WriteLine(@"<tbody>");
		PushIndent("\t");

		foreach (TestStep currentTestStep in testSteps)
		{		
			WriteLine(@"<tr>");
			WriteLine(string.Format("<td>{0}</td>", count++));
			WriteLine(string.Format("<td>{0}</td>", currentTestStep.ActionTitle));
			WriteLine(string.Format("<td>{0}</td>", currentTestStep.ActionExpectedResult));
			WriteLine(@"</tr>");
		}	
    }
	else
    {
		WriteLine(@"<table cellpadding=""0"" cellspacing=""0"">");
		PushIndent("\t");
		WriteLine(@"<thead>");
		PushIndent("\t");
		WriteLine(@"<tr>");
		PushIndent("\t");
		WriteLine("<td>No Test Steps Available</td>");
		PushIndent("\t");
		WriteLine(@"</tr>");
    }   
	PopIndent();
	WriteLine(@"</tbody>");
	PopIndent();
	WriteLine(@"</thead>");
	PopIndent();
	WriteLine(@"</table>");
	WriteLine(@"<hr/>");
}
#>