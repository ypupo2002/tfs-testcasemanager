<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestCaseManagerCore.BusinessLogic.Entities" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="FullTestCases" type="System.Collections.Generic.List<TestCaseManagerCore.BusinessLogic.Entities.TestCaseFull>" #>
<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
	<style type="text/css">
        html, body, button, ul, li, span, table, thead, tbody, tr, th, td, hr {
            margin: 0;
            padding: 0;
        }

        .testCaseProps {
            display: block;
        }

            .testCaseProps > span {
                font-size: 1.2em;
                font-weight: bold;
            }

        .noTestStepsTable th {
            text-align: left;
        }

        hr {
            height: 3px;
            color: #339933;
            background-color: #339933;
            border-width: 0;
            margin-bottom: 30px;
            margin-top: 30px;
        }

        body {
            background-color: #fff;
            color: #000;
        }

        th, td {
            border: 1px solid #000;
            padding: 1%;
        }

        table {
            margin-top: 10px;
            border-collapse: collapse;
            width: 100%;
        }

        th:first-child, td:first-child {
            width: 5%;
        }

        th:nth-child(2), td:nth-child(2) {
            width: 40%;
        }

        th:nth-child(3), td:nth-child(3) {
            width: 40%;
        }

        .expanded {
            display: block;
        }

        .collapsed {
            display: none;
        }

        ul {
            margin-top: 20px;
            margin-left: 20px;
            list-style-type: none;
        }

        button {
            padding: 1px 5px;
            margin-top: 5px;
			margin-bottom: 5px;
            background-color: #fff;
            border: 2px solid #339933;
            color: #339933;
            font-weight: 900;
        }
		
		 button:hover {
                background-color: #339933;
                color: #fff;
            }

        #expandAll, #collapseAll {
            position: absolute;
            top: 20px;
            position: fixed;
        }

        #expandAll {
            right: 180px;
        }

        #collapseAll {
            right: 20px;
        }
		
		.comment {
			min-height: 100px;
			min-width: 100px;
			border: 2px solid #339933;
		}

		.active {
			background-color: #bdd7ee;
		}

		.failed {
			background-color: #ff0000;
		}

		.passed {
			background-color: #92d050;
		}

		.blocked {
			background-color: #ed7d31;
		}

		.status {
		display: inline-block;
		}
    </style>
</head>
<body>
<button id="expandAll">Expand All</button>
<button id="collapseAll">Collapse All</button>
<ul>
<#
	BuildBody();
#>
</ul>

<script>
(function () {
    var liItems = document.getElementsByTagName("li");
    var expandAllButton = document.getElementById("expandAll");
    var collapseAllButton = document.getElementById("collapseAll");


    // initialize li items, by giving a class name and inserting a button(each button gets event for click) for each li item
    for (var i = 0; i < liItems.length; i++) {
        var currTable = liItems[i].getElementsByTagName("TABLE")[0];
        currTable.className = "collapsed";
        
		var currentLiButton = liItems[i].getElementsByTagName("BUTTON")[0];
        currentLiButton.addEventListener("click", expandCollapseTestCase, false);
		
		var commentButton = liItems[i].getElementsByTagName("BUTTON")[1];
		commentButton.addEventListener("click", expandCollapseComment, false);

		// get span and color it
		var statusSpan = liItems[i].getElementsByClassName("status")[0];
		var currentStatus = getStatus(statusSpan);
	    statusBackgroundColorChange(currentStatus, statusSpan);
    }

	function expandCollapseComment(event) {
		if (this.className === "collapsedButton") {
			var currentComment = event.target.parentElement.getElementsByClassName("comment collapsed")[0];
			currentComment.className = "comment expanded";
			this.innerText = " - ";
			this.className = "expandedButton";
			this.nextElementSibling.innerHTML = "Hide";
		} else if (this.className === "expandedButton") {
			var currentComment = event.target.parentElement.getElementsByClassName("comment expanded")[0];
			currentComment.className = "comment collapsed";
			this.innerText = " + ";
			this.nextElementSibling.innerHTML = "Show";
			this.className = "collapsedButton";
		}
	}

    function expandCollapseTestCase(event) {
        if (this.name === "collapsed") {
            var currentTable = event.target.parentElement.getElementsByTagName("TABLE")[0];
            currentTable.className = "expanded";
            this.name = "expanded";
            this.innerHTML = " - ";
            this.nextElementSibling.innerHTML = "Hide ";
        } else {
            var currentTable = event.target.parentElement.getElementsByTagName("TABLE")[0];
            currentTable.className = "collapsed";
            this.name = "collapsed";
            this.innerHTML = " + ";
            this.nextElementSibling.innerHTML = "Show ";
        }
    }

    function expandAll() {
        for (var i = 0; i < liItems.length; i++) {
            var currentTable = liItems[i].getElementsByTagName("TABLE")[0];
            currentTable.className = "expanded";
            var expandButton = liItems[i].getElementsByTagName("Button")[0];
            expandButton.innerHTML = " - ";
            expandButton.name = "expanded";
            var showHideLabel = expandButton.nextElementSibling;
            showHideLabel.innerHTML = "Hide "


			var currentComment = event.target.parentElement.getElementsByClassName("comment collapsed")[0];
			currentComment.className = "comment expanded";
			var commentButton = liItems[i].getElementsByTagName("BUTTON")[1];
			commentButton.innerText = " - ";
			commentButton.className = "expandedButton";
			commentButton.nextElementSibling.innerHTML = "Hide";
        }
    }

    function collapseAll() {
        for (var i = 0; i < liItems.length; i++) {
            var currentTable = liItems[i].getElementsByTagName("TABLE")[0];
            currentTable.className = "collapsed";
            var collapsedButton = liItems[i].getElementsByTagName("Button")[0];
            collapsedButton.innerHTML = " + ";
            collapsedButton.name = "collapsed";
            var showHideLabel = collapsedButton.nextElementSibling;
            showHideLabel.innerHTML = "Show "

			var currentComment = event.target.parentElement.getElementsByClassName("comment expanded")[0];
			currentComment.className = "comment collapsed";
			var commentButton = liItems[i].getElementsByTagName("BUTTON")[1];
			commentButton.innerText = " + ";
			commentButton.nextElementSibling.innerHTML = "Show";
			commentButton.className = "collapsedButton";
        }
    }

	    function statusBackgroundColorChange(status, statusSpan) {
        if (status.indexOf("Active") != -1) {
            statusSpan.className = "testCaseProps status active";
            statusSpan.firstChild
        } else if (status.indexOf("Passed") != -1) {
            statusSpan.className = "testCaseProps status passed";
        } else if (status.indexOf("Failed") != -1) {
            statusSpan.className = "testCaseProps status failed";
        } else if (status.indexOf("Blocked") != -1) {
            statusSpan.className = "testCaseProps status blocked";
        }
    }

    function getStatus(statusSpan) {
        var innerText = String(statusSpan.innerText);
        return innerText;
    }

    expandAllButton.addEventListener("click", expandAll, false);
    collapseAllButton.addEventListener("click", collapseAll, false);


})();



    </script>
</body>
</html>
<#+
public void BuildBody()
{
	foreach (TestCaseFull currentFullTestCase in FullTestCases)
	{
		PushIndent("\t");
		BuildTestCaseProperties(currentFullTestCase.TestCase, currentFullTestCase.ExecutionComment, currentFullTestCase.MostRecentResult);
		BuildTestCaseTestStepsTable(currentFullTestCase.TestSteps);
		PopIndent();
	} 
}

public void BuildTestCaseProperties(TestCase testCase, string comment, string status)
{	
	WriteLine(@"<li>");
	WriteLine(@"<span class=""testCaseProps""><span>Title: </span>");
	WriteLine(testCase.ITestCase.Title);
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Suite: </span>");
	if(testCase.ITestSuiteBase != null)
    {
		WriteLine(testCase.ITestSuiteBase.Title);
    }
	
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Area: </span>");
	WriteLine(testCase.Area);
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Priority: </span>");
	WriteLine(testCase.Priority.ToString());
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Automated: </span>");
	if(testCase.ITestCase != null)
    {
		WriteLine(testCase.ITestCase.IsAutomated.ToString());
    }	
	WriteLine(@"</span>");
	WriteLine(@"<span class=""testCaseProps""><span>Assigned To: </span>");
	WriteLine(testCase.OwnerDisplayName);
	WriteLine(@"</span>");	
    WriteLine(@"<span class=""testCaseProps status"">Status: {0}</span>", status);
	WriteLine(@"<br>");
	WriteLine(@"<button name='collapsed'> + </button> <span>Show</span><span> steps</span>");
	WriteLine(@"<br>");
	WriteLine(@"<button class='collapsedButton'> + </button> <span>Show</span><span> comment</span>");
	WriteLine(@"<div class='comment collapsed'>{0}</div>", comment);
}

public void BuildTestCaseTestStepsTable(List<TestStep> testSteps)
{	
	if(testSteps.Count > 0)
    {
		WriteLine(@"<table cellpadding=""0"" cellspacing=""0"">");
		PushIndent("\t");
		WriteLine(@"<thead>");
		PushIndent("\t");
		int count = 1;
		WriteLine(@"<tr>");
		PushIndent("\t");
		WriteLine(@"<th>Number</th>");
		WriteLine(@"<th>Actions</th>");
		WriteLine(@"<th>Expected Results</th>");
		PopIndent();
		WriteLine(@"</tr>");
		WriteLine(@"</thead>");
		WriteLine(@"<tbody>");
		PushIndent("\t");

		foreach (TestStep currentTestStep in testSteps)
		{		
			WriteLine(@"<tr>");
			WriteLine(string.Format("<td>{0}</td>", count++));
			string currentTestStepActionTitle = currentTestStep.ActionTitle.Replace("\r\n","<br>").Replace("\n","<br>"); 
			string currentTestStepActionExpectedResult = currentTestStep.ActionExpectedResult.Replace("\r\n","<br>").Replace("\n","<br>");
			WriteLine(string.Format("<td>{0}</td>", currentTestStepActionTitle));
			WriteLine(string.Format("<td>{0}</td>", currentTestStepActionExpectedResult));
			WriteLine(@"</tr>");
		}	
    }
	else
    {
		WriteLine(@"<table cellpadding=""0"" cellspacing=""0"">");
		PushIndent("\t");
		WriteLine(@"<tbody>");
		PushIndent("\t");
		WriteLine(@"<tr>");
		PushIndent("\t");
		WriteLine("<td>No Test Steps Available</td>");
		PushIndent("\t");
		WriteLine(@"</tr>");
    }   
	PopIndent();
	WriteLine(@"</tbody>");
	PopIndent();
	WriteLine(@"</table>");
	WriteLine(@"</li>");
	WriteLine(@"<hr />");
}
#>